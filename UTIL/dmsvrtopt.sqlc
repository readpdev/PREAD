      /*%METADATA                                                     */
      /* %TEXT Virtual Optical Migration Utility                      */
      /*%EMETADATA                                                    */
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <decimal.h>

#include "qmhsndpm.h"
#include "qwcrdtaa.h"
#include "qusec.h"

#define OK 0

void cleanUp(void);
int setUpEnv(void);
void spm(char *msgText, int maxArg, ...);
int run(char *cmdText, int maxArg, ...);
int getSysDft(char *pSysDft);
int addImgClgEnt(void);

char cmd[512];
char docMgrPgmLib[10], docMgrDtaLib[10];
Qus_EC_t apiError;
char sysDft[1024];
char sqlStmt[512];

void main(int argc, char *argv[])
{
  int rc = OK;
  memset(docMgrPgmLib, 0, sizeof(docMgrPgmLib));
  strcpy(docMgrPgmLib, argv[1]);
  cleanUp();
  rc = setUpEnv();
  if (!rc) rc = addImgClgEnt();
  return;
}

int setUpEnv(void)
{
  int rc = OK;
  if (rc = run("chkobj %s *lib", 1, docMgrPgmLib))
    spm("Library %s not found", 1, docMgrPgmLib);
  if (!rc) run("addlible %s", 1, docMgrPgmLib);
  if (!rc && (rc = getSysDft(sysDft)))
    spm("Error retrieving SYSDFT dtaara", 0);
  /* Data library */
  if (!rc) run("addlible %s", 1, strncpy(docMgrDtaLib, sysDft+305,10));
  if (!rc && (rc = system("CRTDEVOPT DEVD(DMSVRTOPT) RSRCNAME(*VRT)")))
    spm("Error creating device DMSVRTOPT", 0);
  if (!rc && (rc = system("VRYCFG CFGOBJ(DMSVRTOPT) CFGTYPE(*DEV) STATUS(*ON)")))
    spm("Error varying on device DMSVRTOPT", 0);
  if (!rc && (rc = system("CRTIMGCLG IMGCLG(DMSVRTOPT) DIR('/DMSVRTOPT')")))
    spm("Error creating image catalog DMSVRTOPT", 0);
  return rc;
}

void cleanUp(void)
{
  system("VRYCFG CFGOBJ(DMSVRTOPT) CFGTYPE(*DEV) STATUS(*OFF)");
  system("DLTDEVD DEVD(DMSVRTOPT)");
  system("LODIMGCLG IMGCLG(IMGCLG) DEV(DMSVRTOPT) OPTION(*UNLOAD)");
  system("DLTIMGCLG IMGCLG(DMSVRTOPT) KEEP(*NO)");
  system("RMVLNK '/DMSVRTOPT'");
  return;
}

void spm(char *msgText, int maxArg, ...)
{
  char msg[128], *rVal[5];
  int i = 0;
  va_list varList;
  va_start(varList, maxArg);
  while (i < maxArg)
    rVal[i++] = va_arg(varList, char *);
  sprintf(msg, msgText, rVal[0], rVal[1], rVal[2], rVal[3], rVal[4], rVal[5]);
  va_end(varList);
  memset(&apiError, 0, sizeof(apiError));
  apiError.Bytes_Provided = sizeof(apiError);
  QMHSNDPM("CPF9898", "QCPFMSG   *LIBL     ", msg, strlen(msg), "*INFO     ",
    "*EXT", 2, "    ", &apiError);
  return;
}

int run(char *cmdText, int maxArg, ...)
{
  char msg[128], *rVal[5];
  int i = 0, rc = OK;
  va_list varList;
  va_start(varList, maxArg);
  while (i < maxArg)
    rVal[i++] = va_arg(varList, char *);
  va_end(varList);
  sprintf(cmd, cmdText, rVal[0], rVal[1], rVal[2], rVal[3], rVal[4], rVal[5]);
  rc = system(cmd);
  return rc;
}

int getSysDft(char *pSysDft)
{
  char sRcvr[sizeof(Qwc_Rdtaa_Data_Returned_t) + 1024];
  Qwc_Rdtaa_Data_Returned_t *pRcvr;
  char *pData;

  apiError.Bytes_Provided = sizeof(apiError);

  QWCRDTAA(sRcvr, sizeof(sRcvr), "SYSDFT    *LIBL     ", 1, 1024, &apiError);
  if(apiError.Bytes_Available > 0)
  {
    memset(pSysDft, ' ', 1024);
    return 1;
  }

  pRcvr = (Qwc_Rdtaa_Data_Returned_t *) sRcvr;
  pData = ((char *) pRcvr) + sizeof(Qwc_Rdtaa_Data_Returned_t);

  memcpy(pSysDft, pData, pRcvr->Length_Value_Returned);
  return 0;
}

int addImgClgEnt(void)
{
  int rc = OK;
  exec sql include sqlca;
  exec sql begin declare section;
    char storageVolume[10];
    decimal(15,0) storageCapacity;
  exec sql end declare section;
  exec sql declare c1 cursor for select mstgvol.svvol, mstgdev.sdcap
    from mstgvol, mstgdev where mstgvol.svdev = mstgdev.sddev;
  exec sql open c1;
  exec sql fetch c1 into :storageVolume, :storageCapacity;
  while (sqlca.sqlcode == 0)
  {
    sprintf(cmd, "addimgclge imgclg(%s) fromfile(*new) tofile(%s) volnam(%s) \
      imgsiz(%D(15,0))", "DMSVRTOPT", storageVolume, storageVolume, storageCapacity);
      rc = system(cmd);
    exec sql fetch c1 into :storageVolume, :storageCapacity;
  }
  exec sql close c1;
  return rc;
}
